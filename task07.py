import random
import pandas as pd
import matplotlib.pyplot as plt

def simulate_dice_rolls(num_simulations: int):
    '''–Ü–º—ñ—Ç—É—î –∫–∏–¥–∞–Ω–Ω—è –¥–≤–æ—Ö –∫—É–±–∏–∫—ñ–≤ –∑–∞–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤'''
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (—Å—É–º–∏ –≤—ñ–¥ 2 –¥–æ 12)
    sums_counts = {i: 0 for i in range(2, 13)}

    # –ü—Ä–æ–≤–æ–¥–∏–º–æ —Å–∏–º—É–ª—è—Ü—ñ—é
    for _ in range(num_simulations):
        # –ö–∏–¥–∞—î–º–æ –¥–≤–∞ –∫—É–±–∏–∫–∏
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)
        
        # –û–±—á–∏—Å–ª—é—î–º–æ —Å—É–º—É —Ç–∞ –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
        roll_sum = dice1 + dice2
        sums_counts[roll_sum] += 1

    return sums_counts

def calculate_probabilities(sums_counts: dict, num_simulations: int):
    '''–û–±—á–∏—Å–ª—é—î –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ—ó —Å—É–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó'''
    probabilities = {sum_val: count / num_simulations for sum_val, count in sums_counts.items()}
    return probabilities

def display_results(probabilities: dict, sums_counts: dict, num_simulations: int):
    '''–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫–∞'''
    # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    theoretical_probs = {
        2: 1/36, 3: 2/36, 4: 3/36, 5: 4/36, 6: 5/36, 7: 6/36,
        8: 5/36, 9: 4/36, 10: 3/36, 11: 2/36, 12: 1/36
    }

    data = []
    for sum_val, prob in probabilities.items():
        data.append([
            sum_val, 
            sums_counts[sum_val], 
            f"{prob:.4f}", 
            f"{theoretical_probs[sum_val]:.4f}"
        ])
    
    df = pd.DataFrame(data, columns=["–°—É–º–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–ø–∞–¥—ñ–Ω—å", "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)", "–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å"])
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó –¥–ª—è {num_simulations} –∫–∏–¥–∫—ñ–≤: üé≤\n")
    print(df.to_string(index=False))

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    sums = list(probabilities.keys())
    probs_values = list(probabilities.values())

    plt.figure(figsize=(10, 6))
    plt.bar(sums, probs_values, color='skyblue', edgecolor='black', label='–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)')
    
    # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—é —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏—Ö –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    plt.plot(sums, theoretical_probs.values(), color='red', marker='o', linestyle='--', label='–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å')

    plt.title('–ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ —Å—É–º –ø—Ä–∏ –∫–∏–¥–∞–Ω–Ω—ñ –¥–≤–æ—Ö –∫—É–±–∏–∫—ñ–≤ (–ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)')
    plt.xlabel('–°—É–º–∞ —á–∏—Å–µ–ª –Ω–∞ –∫—É–±–∏–∫–∞—Ö')
    plt.ylabel('–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å')
    plt.xticks(sums)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.legend()
    plt.show()

if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–ª–∏–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∏–¥–∫—ñ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
    NUM_SIMULATIONS = 1_000_000

    # –ü—Ä–æ–≤–æ–¥–∏–º–æ —Å–∏–º—É–ª—è—Ü—ñ—é
    counts = simulate_dice_rolls(NUM_SIMULATIONS)
    
    # –û–±—á–∏—Å–ª—é—î–º–æ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
    probabilities = calculate_probabilities(counts, NUM_SIMULATIONS)
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    display_results(probabilities, counts, NUM_SIMULATIONS)